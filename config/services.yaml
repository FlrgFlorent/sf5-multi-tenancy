# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    TENANT_DATABASE_HOST: '%env(TENANT_DATABASE_HOST)%'
    TENANT_DATABASE_PORT: '%env(TENANT_DATABASE_PORT)%'
    TENANT_DATABASE_BUILDUSER: '%env(TENANT_DATABASE_BUILDUSER)%'
    TENANT_DATABASE_BUILDPASSWORD: '%env(TENANT_DATABASE_BUILDPASSWORD)%'

    allowed_commands:
        - doctrine:database:create
        - doctrine:database:drop
        - doctrine:schema:update
        - doctrine:schema:create
        - doctrine:schema:drop
        - doctrine:fixtures:load
        - doctrine:migrations:diff
        - doctrine:migrations:execute
        - doctrine:migrations:generate
        - doctrine:migrations:migrate
        - doctrine:migrations:version
        - doctrine:migrations:status
        - doctrine:mapping:info

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    main.repository.tenant:
        class: App\Repository\Main\TenantRepository
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - App\Entity\Main\Tenant

    tenant.command.database.listener:
        class: App\Listener\Command\DatabaseListener
        tags:
            - { name: kernel.event_listener, event: console.command, method: onConsoleCommand, priority: 254 }

    tenant.command.listener:
        class: App\Listener\Command\CommandListener
        arguments:
            - '@doctrine.dbal.tenant_connection'
            - '@main.repository.tenant'
            - '%allowed_commands%'
        tags:
            - { name: kernel.event_listener, event: console.command, method: onConsoleCommand, priority: 255 }